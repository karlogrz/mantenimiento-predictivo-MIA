import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import time
import random
import plotly.graph_objects as go
import plotly.express as px
from scipy import stats

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Mantenimiento Predictivo",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo y descripci√≥n
st.title("üöó Sistema de Mantenimiento Predictivo para Veh√≠culos")
st.markdown("""
Esta aplicaci√≥n simula un sistema de inteligencia artificial predictivo que analiza datos de sensores 
(temperatura y RPM) para anticipar fallas y optimizar el mantenimiento de veh√≠culos.
""")

# Sidebar para entrada de datos
with st.sidebar:
    st.header("Configuraci√≥n de Entrada")
    
    # Selector de modo
    modo = st.radio("Modo de operaci√≥n:", ("Simulaci√≥n en tiempo real", "Datos hist√≥ricos"))
    
    if modo == "Simulaci√≥n en tiempo real":
        st.subheader("Par√°metros de Simulaci√≥n")
        temp_min = st.slider("Temperatura m√≠nima (¬∞C)", 70, 90, 75)
        temp_max = st.slider("Temperatura m√°xima (¬∞C)", 90, 120, 95)
        rpm_min = st.slider("RPM m√≠nima", 1000, 2000, 1200)
        rpm_max = st.slider("RPM m√°xima", 2000, 5000, 3000)
        frecuencia = st.slider("Frecuencia de medici√≥n (segundos)", 1, 10, 2)
        
        iniciar_simulacion = st.button("Iniciar Simulaci√≥n")
        detener_simulacion = st.button("Detener Simulaci√≥n")
        
    else:
        st.subheader("Carga de Datos Hist√≥ricos")
        archivo = st.file_uploader("Subir archivo CSV", type=["csv"])
        if archivo:
            datos_historicos = pd.read_csv(archivo)
            st.success("Datos cargados correctamente")

# Funciones de utilidad
def generar_datos_sinteticos(n=1000):
    """Genera datos sint√©ticos para la demostraci√≥n"""
    np.random.seed(42)
    
    # Generar datos normales
    temp_normal = np.random.normal(85, 5, n)
    rpm_normal = np.random.normal(2500, 500, n)
    estado_normal = ["Normal"] * n
    
    # Generar datos de falla (temperatura alta)
    temp_alta = np.random.normal(105, 7, n//2)
    rpm_alta = np.random.normal(2800, 600, n//2)
    estado_alta = ["Falla por temperatura"] * (n//2)
    
    # Generar datos de falla (RPM alta)
    temp_rpm = np.random.normal(90, 6, n//2)
    rpm_alta2 = np.random.normal(4000, 800, n//2)
    estado_rpm = ["Falla por RPM"] * (n//2)
    
    # Combinar todos los datos
    temperaturas = np.concatenate([temp_normal, temp_alta, temp_rpm])
    rpm = np.concatenate([rpm_normal, rpm_alta, rpm_alta2])
    estados = np.concatenate([estado_normal, estado_alta, estado_rpm])
    
    # Crear DataFrame
    fechas = pd.date_range(start='2023-01-01', periods=len(temperaturas), freq='H')
    df = pd.DataFrame({
        'fecha': fechas,
        'temperatura': temperaturas,
        'rpm': rpm,
        'estado': estados
    })
    
    return df

def predecir_falla(temperatura, rpm):
    """Funci√≥n simple para predecir fallas basada en reglas"""
    if temperatura > 100 and rpm > 3500:
        return "Alerta Cr√≠tica: Falla inminente por sobrecalentamiento y alto RPM"
    elif temperatura > 100:
        return "Alerta: Temperatura cr√≠tica"
    elif rpm > 3500:
        return "Alerta: RPM cr√≠tico"
    elif temperatura > 95:
        return "Advertencia: Temperatura elevada"
    elif rpm > 3000:
        return "Advertencia: RPM elevado"
    else:
        return "Normal"

def simular_falla(temperatura, rpm):
    """Simula posibles fallas en piezas basado en temperatura y RPM"""
    fallas = []
    
    if temperatura > 100:
        fallas.append(("Sistema de refrigeraci√≥n", 0.85))
        fallas.append(("Junta de culata", 0.75))
    
    if rpm > 3500:
        fallas.append(("Embrague", 0.8))
        fallas.append(("Transmisi√≥n", 0.7))
    
    if temperatura > 100 and rpm > 3500:
        fallas.append(("Motor completo", 0.9))
        fallas.append(("Sistema de lubricaci√≥n", 0.8))
    
    # Ordenar por probabilidad descendente
    fallas.sort(key=lambda x: x[1], reverse=True)
    
    return fallas

# Cargar o generar datos
if 'datos' not in st.session_state:
    st.session_state.datos = generar_datos_sinteticos()

if 'mediciones' not in st.session_state:
    st.session_state.mediciones = []

if 'simulando' not in st.session_state:
    st.session_state.simulando = False

# L√≥gica para la simulaci√≥n en tiempo real
if modo == "Simulaci√≥n en tiempo real":
    if iniciar_simulacion:
        st.session_state.simulando = True
    
    if detener_simulacion:
        st.session_state.simulando = False
    
    if st.session_state.simulando:
        st.info("Simulaci√≥n en curso...")
        
        # Generar nueva medici√≥n
        nueva_temperatura = random.uniform(temp_min, temp_max)
        nueva_rpm = random.uniform(rpm_min, rpm_max)
        estado = predecir_falla(nueva_temperatura, nueva_rpm)
        timestamp = datetime.now()
        
        # Guardar medici√≥n
        st.session_state.mediciones.append({
            'timestamp': timestamp,
            'temperatura': nueva_temperatura,
            'rpm': nueva_rpm,
            'estado': estado
        })
        
        # Mostrar alerta si es necesario
        if "Alerta" in estado:
            st.error(f"üö® {estado} - {timestamp.strftime('%H:%M:%S')}")
        elif "Advertencia" in estado:
            st.warning(f"‚ö†Ô∏è {estado} - {timestamp.strftime('%H:%M:%S')}")
        else:
            st.success(f"‚úÖ {estado} - {timestamp.strftime('%H:%M:%S')}")
        
        # Esperar antes de la pr√≥xima medici√≥n
        time.sleep(frecuencia)
        st.rerun()

# Mostrar datos y an√°lisis
st.header("An√°lisis de Datos")

# Pesta√±as para organizar la visualizaci√≥n
tab1, tab2, tab3, tab4 = st.tabs([
    "Distribuci√≥n", 
    "Concordancia", 
    "Registro de Mediciones", 
    "Simulador de Fallas"
])

with tab1:
    st.subheader("Distribuci√≥n de Temperatura y RPM")
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_temp = px.histogram(
            st.session_state.datos, 
            x='temperatura', 
            color='estado',
            title='Distribuci√≥n de Temperatura',
            nbins=30
        )
        st.plotly_chart(fig_temp, use_container_width=True)
    
    with col2:
        fig_rpm = px.histogram(
            st.session_state.datos, 
            x='rpm', 
            color='estado',
            title='Distribuci√≥n de RPM',
            nbins=30
        )
        st.plotly_chart(fig_rpm, use_container_width=True)
    
    # Gr√°fico de dispersi√≥n
    fig_scatter = px.scatter(
        st.session_state.datos,
        x='temperatura',
        y='rpm',
        color='estado',
        title='Relaci√≥n entre Temperatura y RPM'
    )
    st.plotly_chart(fig_scatter, use_container_width=True)

with tab2:
    st.subheader("Gr√°fico de Concordancia")
    
    # Preparar datos para el gr√°fico de concordancia
    datos_concordancia = st.session_state.datos.copy()
    datos_concordancia['fecha_num'] = pd.to_datetime(datos_concordancia['fecha']).astype(int) / 10**9
    
    fig_concordancia = go.Figure()
    
    # Agregar trazas para temperatura
    fig_concordancia.add_trace(go.Scatter(
        x=datos_concordancia['fecha'],
        y=datos_concordancia['temperatura'],
        mode='lines',
        name='Temperatura',
        yaxis='y1'
    ))
    
    # Agregar trazas para RPM
    fig_concordancia.add_trace(go.Scatter(
        x=datos_concordancia['fecha'],
        y=datos_concordancia['rpm'],
        mode='lines',
        name='RPM',
        yaxis='y2'
    ))
    
    # Configurar dise√±o del gr√°fico
    fig_concordancia.update_layout(
        title='Concordancia entre Temperatura y RPM a lo largo del tiempo',
        xaxis=dict(title='Fecha'),
        yaxis=dict(title='Temperatura (¬∞C)', side='left'),
        yaxis2=dict(title='RPM', side='right', overlaying='y'),
        legend=dict(x=0, y=1.1, orientation='h')
    )
    
    st.plotly_chart(fig_concordancia, use_container_width=True)
    
    # Mostrar correlaci√≥n
    correlacion = np.corrcoef(datos_concordancia['temperatura'], datos_concordancia['rpm'])[0, 1]
    st.metric("Correlaci√≥n entre Temperatura y RPM", f"{correlacion:.2f}")

with tab3:
    st.subheader("Registro de Mediciones")
    
    if st.session_state.mediciones:
        # Crear DataFrame con las mediciones
        df_mediciones = pd.DataFrame(st.session_state.mediciones)
        
        # Mostrar tabla
        st.dataframe(df_mediciones.sort_values('timestamp', ascending=False))
        
        # Opci√≥n para descargar datos
        csv = df_mediciones.to_csv(index=False)
        st.download_button(
            label="Descargar registro como CSV",
            data=csv,
            file_name="registro_mantenimiento.csv",
            mime="text/csv"
        )
    else:
        st.info("No hay mediciones registradas. Inicie la simulaci√≥n para generar datos.")

with tab4:
    st.subheader("Simulador de Fallas en Piezas")
    
    # Selectores para par√°metros de simulaci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        temp_sim = st.slider("Temperatura para simulaci√≥n (¬∞C)", 70, 120, 85)
    
    with col2:
        rpm_sim = st.slider("RPM para simulaci√≥n", 1000, 5000, 2500)
    
    # Simular fallas
    fallas_simuladas = simular_falla(temp_sim, rpm_sim)
    
    if fallas_simuladas:
        st.warning("‚ö†Ô∏è Se detectaron posibles fallas en las siguientes piezas:")
        
        for pieza, probabilidad in fallas_simuladas:
            # Crear una barra de progreso para la probabilidad
            st.write(f"{pieza}: {probabilidad*100:.1f}% de probabilidad")
            st.progress(probabilidad)
    else:
        st.success("‚úÖ No se detectaron fallas potenciales con estos par√°metros.")
    
    # Mostrar recomendaciones
    st.subheader("Recomendaciones de Mantenimiento")
    
    if temp_sim > 100:
        st.info("""
        **Para temperatura alta:**
        - Verificar nivel de refrigerante
        - Revisar funcionamiento del ventilador
        - Limpiar radiador y conductos de refrigeraci√≥n
        """)
    
    if rpm_sim > 3500:
        st.info("""
        **Para RPM alto:**
        - Verificar sistema de embrague
        - Revisar cambio de marchas
        - Realizar alineaci√≥n y balanceo
        """)
    
    if temp_sim <= 95 and rpm_sim <= 3000:
        st.info("""
        **Mantenimiento preventivo general:**
        - Cambio de aceite y filtros
        - Revisi√≥n de frenos
        - Inspecci√≥n de neum√°ticos
        """)

# Pie de p√°gina
st.markdown("---")
st.markdown("""
### Acerca de este sistema
Este sistema de mantenimiento predictivo utiliza inteligencia artificial para analizar datos de sensores 
y anticipar posibles fallas en veh√≠culos. Los datos mostrados son simulados para demostraci√≥n.
""")