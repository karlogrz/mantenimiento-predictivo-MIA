import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import time
from streamlit_lottie import st_lottie
import json
import requests

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="üöó Mantenimiento Predictivo Din√°mico",
    layout="wide",
    page_icon="üîß"
)

# ---- Configuraci√≥n de Telegram ----
TELEGRAM_TOKEN = "7991651835:AAE6ZPekhcddQs8yBc6Q0HzwBWaymfE-23c"
TELEGRAM_CHAT_ID = "6583159864"

def enviar_alerta_telegram(mensaje):
    """Env√≠a un mensaje de alerta a Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": mensaje,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            st.error(f"Error al enviar mensaje a Telegram: {response.text}")
        else:
            st.success("‚úÖ Alerta enviada a Telegram")
    except Exception as e:
        st.error(f"Error de conexi√≥n: {e}")

# ---- Carga de animaci√≥n Lottie (opcional) ----
def load_lottie(filepath: str):
    try:
        with open(filepath, "r") as f:
            return json.load(f)
    except:
        return None

# ---- Datos sint√©ticos en tiempo real ----
@st.cache_data
def generar_datos_sinteticos():
    np.random.seed(42)
    horas = np.arange(0, 24)
    datos = pd.DataFrame({
        "Hora": horas,
        "RPM": np.random.normal(2500, 300, 24),
        "Temperatura (¬∞C)": np.random.normal(85, 10, 24)
    })
    return datos

# ---- Sidebar (Controles de usuario) ----
st.sidebar.header("üîß Panel de Control")
umbral_temp = st.sidebar.slider("Umbral de temperatura cr√≠tica (¬∞C)", 80, 120, 100)
variables = st.sidebar.multiselect(
    "Variables a visualizar",
    ["RPM", "Temperatura (¬∞C)"],
    default=["Temperatura (¬∞C)"]
)

# Configuraci√≥n de Telegram en el sidebar
st.sidebar.header("ü§ñ Configuraci√≥n de Telegram")
telegram_enabled = st.sidebar.checkbox("Activar alertas por Telegram", value=True)
if telegram_enabled:
    st.sidebar.success("‚úÖ Alertas de Telegram activadas")
    st.sidebar.info(f"Chat ID: {TELEGRAM_CHAT_ID}")
else:
    st.sidebar.warning("‚ùå Alertas de Telegram desactivadas")

# Bot√≥n de prueba para Telegram
if st.sidebar.button("üß™ Probar Telegram"):
    mensaje_prueba = "üîß Prueba de alerta desde Mantenimiento Predictivo\n‚úÖ El bot est√° funcionando correctamente"
    enviar_alerta_telegram(mensaje_prueba)

# ---- Pesta√±as principales ----
tab1, tab2, tab3 = st.tabs(["üìä Dashboard", "üìÖ Hist√≥rico", "‚öôÔ∏è Simulador"])

with tab1:
    st.header("Monitoreo en Tiempo Real")
    
    # Gr√°fico din√°mico (simulaci√≥n de streaming)
    chart_placeholder = st.empty()
    status_placeholder = st.empty()
    datos = generar_datos_sinteticos()
    
    # Variables para controlar el env√≠o de alertas
    alerta_temp_enviada = False
    
    for i in range(len(datos)):
        subset = datos.iloc[:i+1]
        fig = px.line(subset, x="Hora", y=variables, title="Tendencias en Tiempo Real")
        chart_placeholder.plotly_chart(fig, use_container_width=True)
        
        # Verificar alertas en cada iteraci√≥n
        temp_actual = subset["Temperatura (¬∞C)"].iloc[-1]
        hora_actual = subset["Hora"].iloc[-1]
        
        # Mostrar estado actual
        status_text = f"**Hora: {hora_actual}:00** | Temperatura: {temp_actual:.1f}¬∞C | RPM: {subset['RPM'].iloc[-1]:.0f}"
        if temp_actual > umbral_temp:
            status_placeholder.error(f"üö® {status_text} - ¬°Temperatura cr√≠tica!")
        else:
            status_placeholder.success(f"‚úÖ {status_text} - Normal")
        
        # Enviar alerta si se supera el umbral
        if telegram_enabled and temp_actual > umbral_temp and not alerta_temp_enviada:
            mensaje = f"üö® ALERTA DE TEMPERATURA CR√çTICA\n\n‚Ä¢ Valor actual: {temp_actual:.1f}¬∞C\n‚Ä¢ Umbral configurado: {umbral_temp}¬∞C\n‚Ä¢ Hora del evento: {hora_actual}:00\n‚Ä¢ RPM: {subset['RPM'].iloc[-1]:.0f}"
            enviar_alerta_telegram(mensaje)
            alerta_temp_enviada = True
        
        time.sleep(0.5)  # Velocidad de actualizaci√≥n

with tab2:
    st.header("An√°lisis Hist√≥rico")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Datos completos")
        st.dataframe(datos, height=300)
    
    with col2:
        st.subheader("Estad√≠sticas")
        st.metric("Temperatura m√°xima", f"{datos['Temperatura (¬∞C)'].max():.1f}¬∞C")
        st.metric("Temperatura promedio", f"{datos['Temperatura (¬∞C)'].mean():.1f}¬∞C")
        st.metric("RPM promedio", f"{datos['RPM'].mean():.0f}")
    
    # Gr√°fico interactivo
    st.subheader("An√°lisis de correlaci√≥n")
    fig_hist = px.scatter(
        datos,
        x="RPM",
        y="Temperatura (¬∞C)",
        color="Hora",
        title="Relaci√≥n RPM vs Temperatura"
    )
    st.plotly_chart(fig_hist, use_container_width=True)

with tab3:
    st.header("Simulador de Fallos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Selector de fallos
        fallo = st.selectbox("Selecciona un fallo para simular:", 
                           ["Buj√≠as", "Sobrecarga", "Fallo de refrigeraci√≥n", "Filtro obstruido"])
        
        # Par√°metros de simulaci√≥n
        temp_simulacion = st.slider("Temperatura simulada (¬∞C)", 50, 150, 110)
        
        if st.button("üîç Simular fallo", type="primary"):
            if fallo == "Buj√≠as":
                sintomas = "RPM inestables, aumento de temperatura"
                st.error(f"üö® {sintomas}")
                if telegram_enabled:
                    mensaje = f"üîß SIMULACI√ìN: Fallo en Buj√≠as\n‚Ä¢ S√≠ntomas: {sintomas}\n‚Ä¢ Temperatura: {temp_simulacion}¬∞C"
                    enviar_alerta_telegram(mensaje)
                    
            elif fallo == "Fallo de refrigeraci√≥n":
                sintomas = "Temperatura elevada persistente, ventilador no funciona"
                st.warning(f"‚ö†Ô∏è {sintomas}")
                if telegram_enabled:
                    mensaje = f"üîß SIMULACI√ìN: Fallo de refrigeraci√≥n\n‚Ä¢ S√≠ntomas: {sintomas}\n‚Ä¢ Temperatura: {temp_simulacion}¬∞C"
                    enviar_alerta_telegram(mensaje)
                    
            elif fallo == "Filtro obstruido":
                sintomas = "RPM bajas, temperatura variable"
                st.warning(f"‚ö†Ô∏è {sintomas}")
                if telegram_enabled:
                    mensaje = f"üîß SIMULACI√ìN: Filtro obstruido\n‚Ä¢ S√≠ntomas: {sintomas}\n‚Ä¢ Temperatura: {temp_simulacion}¬∞C"
                    enviar_alerta_telegram(mensaje)
                    
            else:  # Sobrecarga
                sintomas = "Temperatura > 110¬∞C, p√©rdida de potencia"
                st.error(f"üö® {sintomas}")
                if telegram_enabled:
                    mensaje = f"üîß SIMULACI√ìN: Sobrecarga del motor\n‚Ä¢ S√≠ntomas: {sintomas}\n‚Ä¢ Temperatura: {temp_simulacion}¬∞C"
                    enviar_alerta_telegram(mensaje)
    
    with col2:
        st.subheader("Informaci√≥n del fallo")
        if fallo == "Buj√≠as":
            st.info("""
            **Fallo en buj√≠as:**
            - Causa: Desgaste normal o contaminaci√≥n
            - Soluci√≥n: Reemplazar buj√≠as
            - Frecuencia: Cada 30,000 km
            """)
        elif fallo == "Fallo de refrigeraci√≥n":
            st.info("""
            **Fallo en sistema de refrigeraci√≥n:**
            - Causa: Fuga de refrigerante o ventilador da√±ado
            - Soluci√≥n: Reparar fugas, revisar ventilador
            - Verificar: Nivel de refrigerante
            """)
        elif fallo == "Filtro obstruido":
            st.info("""
            **Filtro de aire obstruido:**
            - Causa: Acumulaci√≥n de suciedad
            - Soluci√≥n: Reemplazar filtro de aire
            - Frecuencia: Cada 15,000 km
            """)
        else:
            st.info("""
            **Sobrecarga del motor:**
            - Causa: Exceso de carga o conducci√≥n agresiva
            - Soluci√≥n: Reducir carga, revisar aceite
            - Prevenci√≥n: Mantener ritmo de conducci√≥n suave
            """)

# ---- Alertas ----
st.sidebar.header("üö® Alertas")
temp_maxima = datos["Temperatura (¬∞C)"].max()
if temp_maxima > umbral_temp:
    st.sidebar.error(f"¬°Alerta! Temperatura m√°xima: {temp_maxima}¬∞C (Umbral: {umbral_temp}¬∞C)")
else:
    st.sidebar.success(f"‚úÖ Temperatura normal: {temp_maxima}¬∞C")

# ---- Animaci√≥n Lottie (opcional) ----
animacion = load_lottie("motor_animation.json")
if animacion:
    st_lottie(animacion, speed=1, height=200, key="motor")
else:
    st.info("‚≠ê Para a√±adir animaciones, sube un archivo JSON de Lottie llamado 'motor_animation.json'")

# ---- Bot√≥n de descarga ----
st.sidebar.download_button(
    "üì• Descargar Datos",
    datos.to_csv(),
    file_name="datos_motor.csv",
    mime="text/csv"
)

# ---- Informaci√≥n de conexi√≥n ----
with st.sidebar.expander("üîó Estado de conexi√≥n"):
    st.write(f"**Token:** `{TELEGRAM_TOKEN[:10]}...`")
    st.write(f"**Chat ID:** `{TELEGRAM_CHAT_ID}`")
    st.write("**Estado:** ‚úÖ Configurado correctamente")
    
    # Probamos la conexi√≥n
    if st.button("Probar conexi√≥n con Telegram"):
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
            response = requests.get(url)
            if response.status_code == 200:
                st.success("‚úÖ Conexi√≥n exitosa con Telegram")
            else:
                st.error("‚ùå Error en la conexi√≥n")
        except:
            st.error("‚ùå No se pudo conectar con Telegram")

# ---- Footer ----
st.markdown("---")
st.caption("Sistema de Mantenimiento Predictivo | Alertas enviadas a Telegram")